/*******************************************************************
Библиотека, реализующая кольцевой (циклический) буфер.
Автор: N1X
*******************************************************************/
#ifndef FIFO_H
#define FIFO_H

#include <stdint.h>
/*
Здесь задается длина буфера
*/
#define FIFO_LENGTH 16

/*******************************************************************
fifo_t: Тип, описывающий тело нашего буфера:
data: Массив с данными. Здесь хранится содержимое буфера.
head: Переменная, хранящая в себе индекс головы буфера.
tail: Переменная, хранящая в себе индекс хвоста буфера.
count: Переменная, хранящая кол-во элементов, находящихся в буфере.
*******************************************************************/
typedef struct {
  uint8_t data[FIFO_LENGTH];
  uint8_t head;
  uint8_t tail;
  uint8_t count;
} fifo_t;

/*******************************************************************
Функция: fifo_init - инициализирует буфер
Аргументы: 
  fifo_t *fifo - указатель на буфер
Значение: --
*******************************************************************/
void fifo_init(fifo_t *fifo);

/*******************************************************************
Функция: fifo_put - "кладет" данные в буфер
Аргументы:
  fifo_t *fifo  - указатель на буфер
  void *data    - указатель на данные (любой тип)
  u8 offset     - смещение с начального адреса (удобно при работе с массивом)
  u8 count      - количество байт данных
Значение:
s8 - целое со снаком.
  0 - все ОК
  -1 - не хватает места в буфере для выволнения операции
*******************************************************************/
int8_t fifo_put(fifo_t *fifo, void *data, uint8_t offset, uint8_t count);
/*******************************************************************
Функция: fifo_get - "берет" данные из буфера
Аргументы:
  fifo_t *fifo  - указатель на буфер
  void *data    - указатель на место для данных (любой тип)
  u8 offset     - смещение с начального адреса (удобно при работе с массивом)
  u8 count      - количество байт данных для чтения
Значение:
s8 - целое со снаком.
  0 - все ОК
  -1 - запрошено больше данных, чем есть в буфере
*******************************************************************/
int8_t fifo_get(fifo_t *fifo, void *data, uint8_t offset, uint8_t count);
/*******************************************************************
Функция: fifo_count - возвращает количество байт в буфере
Аргументы:
  fifo_t *fifo  - указатель на буфер
Значение:
  s8 - число байт в буфере
*******************************************************************/
uint8_t fifo_count(fifo_t *fifo);

#endif